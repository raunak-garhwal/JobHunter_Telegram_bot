{
  "name": "Telegram_bot_workflow",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        680,
        370
      ],
      "id": "23c4f378-fd99-4445-9364-0f8ba1f4f6eb",
      "name": "Telegram Trigger",
      "webhookId": "da937882-66f1-412a-b0d2-ae13653c7c52",
      "credentials": {
        "telegramApi": {
          "id": "2uuGvHKDIAdEIRcx",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are JobHunter, an intelligent job-search assistant specialized in fetching relevant job listings from India. Your primary function is to intelligently search for jobs and return structured, actionable results.\n\nFor every user message, you MUST:\n1. ALWAYS call the \"Google Search\" tool first\n2. Use the user's query to search for jobs\n3. Parse ALL job results from the search response\n4. Return ONLY valid JSON array format\n\nSearch Instructions:\n- Use the exact user query for searching\n- Extract ALL available job listings from search results\n- Don't filter during search - get maximum results first\n\nOutput format (JSON only, no other text):\n[\n  {\n    \"title\": \"job title\",\n    \"company\": \"company name\", \n    \"location\": \"city, state\",\n    \"job_portal\": \"portal name\",\n    \"apply_link\": \"direct URL\",\n    \"date_posted\": \"X days ago\",\n    \"employment_type\": \"Full-time/Part-time/Contract\",\n    \"experience_required\": \"X+ Years or Fresher\",\n    \"skills_required\": \"skill1, skill2, skill3\",\n    \"salary\": \"salary range or Not specified\"\n  }\n]\n\nRules:\n- MUST use Google Search tool for every request\n- Extract ALL jobs from search results\n- Job postings must not be older than 15 days from {{ $now }}\n- Include jobs from portal like LinkedIn, Indeed, Naukri, etc.\n- Return atleast 20 results\n- JSON format only, no explanations",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1160,
        520
      ],
      "id": "afdb378c-ecf4-4541-be9d-4f7e5c845474",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1100,
        760
      ],
      "id": "495ebc64-c751-4a9f-bd9d-6464a8ea7915",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "aDb0gLUCj8elEZqu",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "let raw = $input.first().json.output;\n\n// Enhanced cleanup for various AI response formats\nraw = raw\n  .replace(/^```(?:json)?\\n/, '')\n  .replace(/\\n```$/, '')\n  .replace(/^(Here is the JSON:|Here is your JSON:)\\s*/, '')\n  .replace(/^(Here are the job listings:|Job listings:)\\s*/, '')\n  .replace(/^\\s*\\[?\\s*/, '') \n  .replace(/\\s*\\]?\\s*$/, '') \n  .trim();\n\n// Add brackets if missing\nif (!raw.startsWith('[')) {\n  raw = '[' + raw + ']';\n}\n\nlet jobs;\ntry {\n  jobs = JSON.parse(raw);\n} catch (err) {\n  try {\n    let fixedRaw = raw\n      .replace(/,\\s*]/g, ']')\n      .replace(/,\\s*}/g, '}')\n      .replace(/}\\s*{/g, '},{');\n    \n    jobs = JSON.parse(fixedRaw);\n  } catch (err2) {\n    throw new Error('Invalid JSON after cleanup: ' + err2.message + '\\nRaw output: ' + raw);\n  }\n}\n\n// Ensure jobs is an array\nif (!Array.isArray(jobs)) {\n  jobs = [jobs];\n}\n\n// SIMPLE LINK VALIDATION\nfunction isValidUrl(url) {\n  if (!url || typeof url !== 'string') return false;\n  \n  url = url.trim();\n  \n  // Basic checks\n  if (url.length < 4) return false;\n  if (url.includes(' ') || url.includes('\\n')) return false;\n  \n  // Must contain a dot for domain\n  if (!url.includes('.')) return false;\n  \n  // Simple URL pattern\n  return /^(https?:\\/\\/)?[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/.test(url);\n}\n\nfunction normalizeUrl(url) {\n  if (!url) return '';\n  \n  url = url.trim();\n  \n  // Add https if missing\n  if (url.startsWith('www.')) {\n    url = 'https://' + url;\n  } else if (!url.startsWith('http://') && !url.startsWith('https://')) {\n    if (url.includes('.')) {\n      url = 'https://' + url;\n    }\n  }\n  \n  return url;\n}\n\n// FILTER AND VALIDATE JOBS\nconst preferredJobs = [];\nconst otherJobs = [];\n\njobs.forEach(job => {\n  const url = job.apply_link;\n  \n  // Skip jobs without apply links\n  if (!url) return;\n  \n  // Validate and normalize URL\n  const normalizedUrl = normalizeUrl(url);\n  if (!isValidUrl(normalizedUrl)) return;\n  \n  // Update the job with normalized URL\n  job.apply_link = normalizedUrl;\n  \n  // Categorize jobs - preferred portals first\n  const portal = (job.job_portal || '').toLowerCase();\n  const link = normalizedUrl.toLowerCase();\n  \n  const isPreferred = link.includes('linkedin.com') || \n                     link.includes('indeed.com') || \n                     link.includes('naukri.com') ||\n                     portal.includes('linkedin') ||\n                     portal.includes('indeed') ||\n                     portal.includes('naukri');\n  \n  if (isPreferred) {\n    preferredJobs.push(job);\n  } else {\n    otherJobs.push(job);\n  }\n});\n\n// Combine all valid jobs - preferred first\nconst finalJobs = [...preferredJobs, ...otherJobs];\n\nconst items = [];\nif (finalJobs.length === 0) {\n  items.push({\n    json: {\n      chatId: $input.first().json.chatId,\n      text: '<b>‚ùå No job listings found with valid application links.</b>\\nPlease try a different keyword or location to improve your results.' ,\n      parse_mode: 'HTML',\n    }\n  });\n  return items;\n}\n\nconst chatId = $input.first().json.chatId;\nconst MAX_TEXT_LEN = 4000;\nconst sliceCount = Math.min(finalJobs.length, 20);\n\nfor (let i = 0; i < sliceCount; i++) {\n  const j = finalJobs[i];\n  \n  let text = `<b>${i+1}. ${j.title || 'No Title'}</b>\\n`;\n  \n  if (j.company) text += `üè¢ <b>Company</b>: ${j.company}\\n`;\n  if (j.location) text += `üìç <b>Location</b>: ${j.location}\\n`;\n  if (j.job_portal) text += `üåê <b>Portal</b>: ${j.job_portal}\\n`;\n  if (j.date_posted) text += `üìÖ <b>Posted</b>: ${j.date_posted}\\n`;\n  if (j.employment_type) text += `üíº <b>Type</b>: ${j.employment_type}\\n`;\n  if (j.experience_required) text += `‚≠ê <b>Experience</b>: ${j.experience_required}\\n`;\n  if (j.salary && j.salary !== 'Not specified') text += `üí∞ <b>Salary</b>: ${j.salary}\\n`;\n  if (j.skills_required) {\n    const skills = j.skills_required.length > 1500 ? \n      j.skills_required.substring(0, 1500) + '...' : \n      j.skills_required;\n    text += `üîß <b>Skills</b>: ${skills}\\n`;\n  }\n  \n  text += `<a href=\"${j.apply_link}\">üîó <b>Apply Here</b></a>\\n\\n`;\n  \n  if (text.length > MAX_TEXT_LEN) {\n    text = text.substring(0, MAX_TEXT_LEN - 20) + '\\n‚Ä¶(truncated)';\n  }\n  \n  items.push({\n    json: {\n      chatId,\n      text,\n      parse_mode: 'HTML',\n    }\n  });\n}\n\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1560,
        520
      ],
      "id": "7ba70ea6-562e-4543-8828-d233c6671abb",
      "name": "Code"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Telegram Trigger').item.json.message.from.id }}",
        "contextWindowLength": 2
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1260,
        760
      ],
      "id": "fc53ba8d-b37c-429c-97f4-8e292c7a693e",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.from.id }}",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1780,
        520
      ],
      "id": "24c0b8a0-91b3-408f-bcb1-58b963ad7318",
      "name": "Send a text message",
      "webhookId": "b6ea9e9a-1e09-44dd-8832-bd8477947cc4",
      "credentials": {
        "telegramApi": {
          "id": "2uuGvHKDIAdEIRcx",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://serpapi.com/search?engine=google_jobs&q={{ $('Telegram Trigger').item.json.message.text}}&location=India&gl=in&hl=en&chips=date_posted:month&api_key=9c028ac313d208e12f59ff9059dfc08dbc58992632b5ddf880f0367ab5246e4e",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1400,
        760
      ],
      "id": "d842d45d-1f21-4db4-9d64-e12e35468a9b",
      "name": "Google Search"
    },
    {
      "parameters": {
        "mode": "expression",
        "numberOutputs": 2,
        "output": "={{$json.message.text === \"/start\" ? 0 : 1}}\n"
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        900,
        370
      ],
      "id": "f5093dbb-e7d7-45ad-bc52-746411c61862",
      "name": "Switch"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.from.id }}",
        "text": "=<b>üëã Welcome to JobHunter!</b>\n\nI'm your smart job assistant to help you discover the latest job openings across India.\n\nüìå Just send me a job title + city  \ne.g. <i>React Developer pune</i>  \n\nI‚Äôll fetch real-time job listings for you.\n\nStart searching now ‚Äî your next opportunity is one message away! üöÄ",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1230,
        220
      ],
      "id": "bc034e6a-2935-4115-9b23-241315c82152",
      "name": "Send a text message1",
      "webhookId": "b6ea9e9a-1e09-44dd-8832-bd8477947cc4",
      "credentials": {
        "telegramApi": {
          "id": "2uuGvHKDIAdEIRcx",
          "name": "Telegram account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Google Search": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Send a text message1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "56d5e571-874e-4c27-82f3-f4f9f3b1bce7",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "2f42a585eb31626a5436037b3c1a05b46f61bdd541afdd3d524f85633654c592"
  },
  "id": "ty7KJeSyPXRkRvB6",
  "tags": []
}
